{"version":3,"sources":["components/Topic/AddTopic/index.js","components/Topic/index.js","serviceWorker.js","index.js","App.js"],"names":["titleInputStyle","fontSize","width","height","padding","border","marginBottom","textInputStyle","resize","index","state","title","text","handleChange","e","_this","setState","Object","defineProperty","target","id","value","resetForm","document","getElementById","reset","handleClick","preventDefault","data","props","addTopic","react_default","a","createElement","type","onChange","this","maxLength","style","placeholder","onClick","Component","topicContainer","borderRadius","paddingLeft","titleTextContainer","voteButton","topic","concat","vote","renderVoteCount","i","_this2","newDatabase","sort","b","slice","console","log","AddTopic","map","key","newState","assign","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","className","Topic","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bef2ffa.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst titleInputStyle = {\n  fontSize : '15px',\n  width: '900px',\n  height: '28px',\n  padding: '7px 7px',\n  border: '1px solid black',\n  marginBottom: '10px'\n};\n\nconst textInputStyle = {\n  fontSize : '15px',\n  width: '900px',\n  height: '50px',\n  padding: '7px 7px',\n  border: '1px solid black',\n  resize: 'none'\n};\n\nclass index extends Component {\n  state = {\n    title: '',\n    text: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id] : e.target.value\n    })\n  }\n\n  resetForm = () =>  {document.getElementById(\"myForm\").reset();}\n\n  handleClick = (e) => {\n    e.preventDefault();\n    const data = {title: this.state.title, text: this.state.text};\n    this.props.addTopic(data,e);\n    this.resetForm();\n  }\n\n  render() {\n    return (\n      <div>\n        <form id=\"myForm\">\n          <input type=\"text\" id=\"title\" onChange={this.handleChange} maxLength=\"50\" style={titleInputStyle} placeholder='Title'>\n          </input>\n          \n          <textarea type=\"text\" id=\"text\" onChange={this.handleChange} maxLength=\"255\" style={textInputStyle} placeholder='Text (optional)'>\n          </textarea>\n          <br/>\n          <button type=\"submit\" value=\"Submit\" onClick={this.handleClick}>Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default index;\n\n","import React, { Component } from 'react'\nimport AddTopic from './AddTopic';\n\nconst topicContainer = {\n  width: '75vw',\n  height: '165px',\n  border: '1px solid black',\n  marginBottom: '10px',\n  borderRadius: '5px',\n  paddingLeft: '10px'\n}\n\nconst titleTextContainer = {\n  height: '100px', \n  marginBottom:'10px'\n}\nconst voteButton = {\n  fontSize: '20px'\n}\n\nclass index extends Component {\n\n  state = {\n    topic: []\n  }\n\n  addTopic = (data, e) => {\n    this.setState({\n      topic: this.state.topic.concat({\n        'title': data.title,\n        'text': data.text,\n        'vote': 0\n      })\n    });\n  }\n\n  renderVoteCount=(i)=>{\n    if( this.state.topic[i].vote >= 0 )\n       return this.state.topic[i].vote;\n    return 0;\n  }\n\n  render() {\n\n    const newDatabase= (this.state.topic.sort(function(a,b){ return b.vote - a.vote;})).slice(0,20);\n    console.log(newDatabase);\n\n    return (\n      <div>\n\n        <AddTopic addTopic={this.addTopic} />\n        <hr></hr>\n\n        <div>\n          {\n            this.state.topic.map((topic, i) =>\n              <div key={i} style={topicContainer}>\n\n                <div style={titleTextContainer}>\n                  <h1>{topic.title}</h1>\n                  <p>{topic.text}</p>\n                </div>\n\n                <div>\n                  <button style={voteButton}\n                    onClick={() => {var newState = Object.assign({}, this.state);\n                                    newState.topic[i].vote += 1;\n                                    this.setState(newState);}}>\n                    +                \n                  </button>\n\n                  <span style={{marginLeft: '10px'}}>\n                    {this.renderVoteCount(i)}\n                    &nbsp;\n                  </span>\n\n                  <button style={voteButton}\n                    onClick={() => {var newState = Object.assign({}, this.state);\n                                    newState.topic[i].vote -= 1;\n                                    this.setState(newState);}}>\n                    -\n                </button>\n              </div>\n\n              </div>\n            )\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Topic from './components/Topic/';\n\nexport default function App() {\n  \n  return (\n    <div className=\"App\">\n      <h1>\n          REDDIT CLONE\n      </h1>\n      \n      <Topic/>\n      \n    </div>\n  );\n}\n"],"sourceRoot":""}